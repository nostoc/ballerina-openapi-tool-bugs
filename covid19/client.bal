// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# This is a generated connector from [World Bank API v2](https://datahelpdesk.worldbank.org/knowledgebase/articles/889392-about-the-indicators-api-documentation) OpenAPI Specification. 
# The World Bank Indicators API provides access to nearly 16,000 time series indicators. Most of these indicators are available online through tools such as `Databank` and the `Open Data` website. The API provides programmatic access to this same data. Many data series date back over 50 years, and can be used to create interesting applications.
@display {label: "World Bank", iconPath: "icon.png"}
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    # The connector initialization doesn't require setting the API credentials.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "http://api.worldbank.org/v2/") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get population of each country
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Population of each countries 
    @display {label: "Get Population"}
    resource isolated function get country/all/indicator/SP\.POP\.TOTL(map<string|string[]> headers = {}, *GetPopulationQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/all/indicator/SP.POP.TOTL`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get population of a country
    #
    # + countryCode - Country code (Example- AFG, ALB, LKA)
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Yearly population of the given country 
    @display {label: "Get Country Population"}
    resource isolated function get country/[string countryCode]/indicator/SP\.POP\.TOTL(map<string|string[]> headers = {}, *GetPopulationByCountryQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/${getEncodedUri(countryCode)}/indicator/SP.POP.TOTL`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get GDP of each country.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - GDP of each country 
    @display {label: "Get GDP"}
    resource isolated function get country/all/indicator/NY\.GDP\.MKTP\.CD(map<string|string[]> headers = {}, *GetGDPQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/all/indicator/NY.GDP.MKTP.CD`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get GDP of a country.
    #
    # + countryCode - Country code (Example- AFG, ALB, LKA)
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Yearly GDP of the given country 
    @display {label: "Get GDP By Country"}
    resource isolated function get country/[string countryCode]/indicator/NY\.GDP\.MKTP\.CD(map<string|string[]> headers = {}, *GetGDPByCountryQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/${getEncodedUri(countryCode)}/indicator/NY.GDP.MKTP.CD`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get percentage of population with access to electricity of countries in the world.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Population percentage having electricity of each country 
    @display {label: "Get Population% Having Electricity"}
    resource isolated function get country/all/indicator/'1\.1_ACCESS\.ELECTRICITY\.TOT(map<string|string[]> headers = {}, *GetAccessToElectricityPercentageQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/all/indicator/1.1_ACCESS.ELECTRICITY.TOT`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get percentage of population with access to electricity of a given country.
    #
    # + countryCode - Country code (Example- AFG, ALB, LKA)
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Yearly population percentage having electricity of the given country 
    @display {label: "Get Population% Having Electricity By Country"}
    resource isolated function get country/[string countryCode]/indicator/'1\.1_ACCESS\.ELECTRICITY\.TOT(map<string|string[]> headers = {}, *GetAccessToElectricityPercentageByCountryQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/${getEncodedUri(countryCode)}/indicator/1.1_ACCESS.ELECTRICITY.TOT`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get literacy rate of youth (% of people ages 15-24) of countries in the world.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Youth literacy rate of each country 
    @display {label: "Get Youth Literacy Rate"}
    resource isolated function get country/all/indicator/'1\.1_YOUTH\.LITERACY\.RATE(map<string|string[]> headers = {}, *GetYouthLiteracyRateQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/all/indicator/1.1_YOUTH.LITERACY.RATE`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get literacy rate of youth (% of people ages 15-24) of a country.
    #
    # + countryCode - Country code (Example- AFG, ALB, LKA)
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Youth literacy rate of the given country 
    @display {label: "Get Youth Literacy Rate By Country"}
    resource isolated function get country/[string countryCode]/indicator/'1\.1_YOUTH\.LITERACY\.RATE(map<string|string[]> headers = {}, *GetYouthLiteracyRateByCountryQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/${getEncodedUri(countryCode)}/indicator/1.1_YOUTH.LITERACY.RATE`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get government expenditure on primary education of each country
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Government expenditure on primary education of each country 
    @display {label: "Get Government Expenditure On Education"}
    resource isolated function get country/all/indicator/UIS\.X\.PPP\.1\.FSGOV(map<string|string[]> headers = {}, *GetGovernmentExpenditureOnPrimaryEducationQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/all/indicator/UIS.X.PPP.1.FSGOV`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get government expenditure on primary education of a country.
    #
    # + countryCode - Country code (Example- AFG, ALB, LKA)
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Government expenditure on primary education of a country 
    @display {label: "Get Government Expenditure On Education By Country"}
    resource isolated function get country/[string countryCode]/indicator/UIS\.X\.PPP\.1\.FSGOV(map<string|string[]> headers = {}, *GetGovernmentExpenditureOnPrimaryEducationByCountryQueries queries) returns WorldBankResponse|error {
        string resourcePath = string `/country/${getEncodedUri(countryCode)}/indicator/UIS.X.PPP.1.FSGOV`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }
}
